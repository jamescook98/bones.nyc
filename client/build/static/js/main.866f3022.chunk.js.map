{"version":3,"sources":["assets/bones_final_large.png","assets/brick_wall_copy.jpg","components/NaviBar/index.js","components/EventsPage/index.js","components/ArtistForm/index.js","components/EventForm/index.js","components/FavoritesPage/index.js","components/LoginPage/index.js","components/SignInPage/index.js","components/UserProfilePage/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NaviBar","mystyle","color","backgroundImage","BrickWall","boxShadow","className","style","src","Logo","alt","React","Component","EventsPage","backgroundColor","height","display","justifyContent","paddingTop","ArtistForm","EventForm","FavoritesPage","LoginPage","SignInPage","updateSettings","event","UserProfilePage","onSubmit","for","type","id","name","minlength","required","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,+C,mBCA3CD,EAAOC,QAAU,IAA0B,6C,0QCKtBC,E,uKAEb,IAAMC,EAAU,CACZC,MAAO,QACPC,gBAAgB,OAAD,OAASC,IAAT,KACfC,UAAW,qCAGf,OACI,kBAAC,IAAD,KACI,yBAAKC,UAAU,SAASC,MAAON,GAC3B,yBAAKO,IAAKC,IAAMC,IAAI,aAAaJ,UAAU,cAC3C,0BAAMA,UAAU,wBAAhB,iB,GAZiBK,IAAMC,WCHtBC,E,uKAYb,OACI,yBAAKN,MAXO,CACZL,MAAO,UACPY,gBAAgB,UAChBC,OAAQ,QACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SAOR,yC,GAfwBP,IAAMC,WCA/B,SAASO,IACpB,OAAQ,8BCDG,SAASC,IACpB,OAAQ,8BCDG,SAASC,IACpB,OAAQ,8BCDG,SAASC,IACpB,OAAQ,8BCDG,SAASC,IACpB,OAAQ,8BCeZ,IAAMC,EAAiB,SAACC,KAGT,SAASC,IAEpB,OACI,6BACI,0BAAMC,SAAUH,GACZ,6CAEA,4CAHJ,kBAIuB,8CAAsB,6BACzC,2BAAOI,IAAI,WAAX,cACA,2BAAOC,KAAK,OAAOC,GAAG,WAAWC,KAAK,QAClCC,UAAU,IAAIC,UAAQ,IAAG,6BAE7B,+CATJ,qBAU0B,oCAAY,6BAClC,2BAAOL,IAAI,WAAX,iBACA,2BAAOC,KAAK,OAAOC,GAAG,cAAcC,KAAK,WACrCC,UAAU,IAAIC,UAAQ,IAAG,6BAE7B,+CACA,2BAAOL,IAAI,mBAAX,qBACA,2BAAOC,KAAK,WAAWC,GAAG,kBAAkBC,KAAK,kBAC7CC,UAAU,IAAIC,UAAQ,IAAG,6BAC7B,0BAAMH,GAAG,wBACT,2BAAOF,IAAI,eAAX,iBACA,2BAAOC,KAAK,WAAWC,GAAG,cAAcC,KAAK,cACzCC,UAAU,IAAIC,UAAQ,IAAG,6BAC7B,2BAAOL,IAAI,sBAAX,0BACA,2BAAOC,KAAK,WAAWC,GAAG,qBAAqBC,KAAK,qBAChDC,UAAU,IAAIC,UAAQ,MCP3BC,MA/Bf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,KACjB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAM,cACjB,kBAACjB,EAAD,OAEF,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAM,aACjB,kBAAChB,EAAD,OAEF,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAM,cACjB,kBAACf,EAAD,OAEF,kBAAC,IAAD,CAAOc,OAAK,EAACC,KAAM,UACjB,kBAACd,EAAD,OAEF,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAM,WACjB,kBAACb,EAAD,OAEF,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAM,gBACjB,kBAACV,EAAD,UCxBUW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.866f3022.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bones_final_large.564a1162.png\";","module.exports = __webpack_public_path__ + \"static/media/brick_wall_copy.93f174de.jpg\";","import React from 'react';\nimport Logo from \"../../assets/bones_final_large.png\";\nimport BrickWall from \"../../assets/brick_wall_copy.jpg\";\nimport FadeIn from 'react-fade-in';\n\nexport default class NaviBar extends React.Component {\n    render() {\n        const mystyle = {\n            color: \"white\",\n            backgroundImage: `url(${BrickWall})`,\n            boxShadow: \"5px 10px 8px rgb(50, 50, 50, 0.2)\"\n        };\n\n        return (\n            <FadeIn>\n                <nav className=\"navbar\" style={mystyle}>\n                    <img src={Logo} alt=\"bones_logo\" className=\"my-2 ml-3\" ></img>\n                    <span className=\"navbar-brand mx-auto\">Welcome</span>\n                </nav>\n            </FadeIn >\n        );\n    }\n}\n\n\n\n","import React from 'react';\n\nexport default class EventsPage extends React.Component {\n    render() {\n        const mystyle = {\n            color: \"#1f60a7\",\n            backgroundColor: `#faf3f0`,\n            height: \"100vh\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            paddingTop: \"5rem\"\n\n        };\n\n        return (\n            <div style={mystyle}>\n\n                <h1>TEST</h1>\n\n            </div>\n        );\n    }\n}","import React from 'react';\n\nexport default function ArtistForm() {\n    return (<div></div>);\n}","import React from 'react';\n\nexport default function EventForm() {\n    return (<div></div>);\n}","import React from 'react';\n\nexport default function FavoritesPage() {\n    return (<div></div>);\n}","import React from 'react';\n\nexport default function LoginPage() {\n    return (<div></div>);\n}","import React from 'react';\n\nexport default function SignInPage() {\n    return (<div></div>);\n}","import React from 'react';\n// const currentPassRef = useRef();\n// const errorMsgRef = useRef();\n// const [currentPass, setCurrentPass] = useState(\"\");\n// const [errorMsg, setErrorMsg] = useState(\"\");\n\n// if (currentPass.current.value !== props.password) {\n//     setErrorMsg(\"Current password is incorrect.\")\n// }\n\n//if newUsername == props.username, error \"That already IS your username\"\n//if newUsername already exists in database && is !== props.username, error \"That username is already taken.\"\n//if after debounce (currentPass.current.value !== props.password), set span to \"Current password is incorrect.\"\n//if (newEmail does not take the form (\"letters/numbers/-/. not ending in -/.\"+\"@\"+\"letters/numbers/-/. not ending in -/.\"+\".\"+\"letters\")), set span to \"must be a valid email\"\n//if after debounce (newPassword.current.value !== reenterNewPassword), set span to \"Passwords do not match.\"\n\n//userID will be passed in. Fetch user info from database using ID. Store user info in \"state\"\n\nconst updateSettings = (event) => {\n    //event.target.username.value will give you whats inside the field named \"username\"(line 41(right now))\n}\nexport default function UserProfilePage() {\n\n    return (\n        <div>\n            <form onSubmit={updateSettings}>\n                <h1>User Settings</h1>\n\n                <h3>Change email</h3>\n                    Current email: <b>taher@taher.com</b><br />\n                <label for=\"oldPass\">New email:</label>\n                <input type=\"text\" id=\"newEmail\" name=\"email\"\n                    minlength=\"8\" required /><br />\n\n                <h3>Change username</h3>\n                    Current username: <b>taher</b><br />\n                <label for=\"oldPass\">New username:</label>\n                <input type=\"text\" id=\"newUsername\" name=\"username\"\n                    minlength=\"8\" required /><br />\n\n                <h3>Change password</h3>\n                <label for=\"currentPassword\">Current password:</label>\n                <input type=\"password\" id=\"currentPassword\" name=\"currentPassword\"\n                    minlength=\"8\" required /><br />\n                <span id=\"currentPasswordTest\" ></span>\n                <label for=\"newPassword\">New password:</label>\n                <input type=\"password\" id=\"newPassword\" name=\"newPassword\"\n                    minlength=\"8\" required /><br />\n                <label for=\"reenterNewPassword\">Re-enter new password:</label>\n                <input type=\"password\" id=\"reenterNewPassword\" name=\"reenterNewPassword\"\n                    minlength=\"8\" required />\n            </form>\n        </div>\n    );\n\n}","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport './App.css';\nimport NaviBar from './components/NaviBar';\nimport EventsPage from './components/EventsPage';\nimport ArtistForm from './components/ArtistForm';\nimport EventForm from './components/EventForm';\nimport FavoritesPage from './components/FavoritesPage';\nimport LoginPage from './components/LoginPage';\nimport SignInPage from './components/SignInPage';\nimport UserProfilePage from './components/UserProfilePage';\n\nfunction App() {\n  return (\n    <Router>\n      <NaviBar />\n      <Switch>\n        <Route exact path={\"/\"}>\n          <EventsPage />\n        </Route>\n        <Route exact path={\"/addartist\"}>\n          <ArtistForm />\n        </Route>\n        <Route exact path={\"/addevent\"}>\n          <EventForm />\n        </Route>\n        <Route exact path={\"/favorites\"}>\n          <FavoritesPage />\n        </Route>\n        <Route exact path={\"/login\"}>\n          <LoginPage />\n        </Route>\n        <Route exact path={\"/signin\"}>\n          <SignInPage />\n        </Route>\n        <Route exact path={\"/userprofile\"}>\n          <UserProfilePage />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}